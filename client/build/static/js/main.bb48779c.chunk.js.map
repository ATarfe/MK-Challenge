{"version":3,"sources":["components/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["UserForm","state","id","name","email","message","handleChange","input","e","setState","target","value","handleSubmit","bind","handleReset","preventDefault","fetch","method","headers","body","JSON","stringify","uuid","this","then","response","ok","json","alert","className","AppBar","position","style","marginBottom","Toolbar","Typography","variant","ref","onSubmit","onError","errors","console","log","label","onChange","validators","errorMessages","Button","type","color","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"iWAwHeA,EA/Gf,kDAEI,aAAe,IAAD,8BACV,gBAKJC,MAAQ,CACJC,GAAG,GACHC,KAAM,GACNC,MAAO,GACPC,QAAS,IAVC,EAadC,aAAe,SAAAC,GAAK,OAAI,SAAAC,GACpB,EAAKC,SAAL,eAAgBF,EAAQC,EAAEE,OAAOC,UAZjC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAHT,EAFlB,yDAmBiBL,GACTA,EAAEO,iBAEFC,MAAM,yEAA0E,CAC5EC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBnB,GAAIoB,MACJnB,KAAMoB,KAAKtB,MAAME,KACjBC,MAAOmB,KAAKtB,MAAMG,MAClBC,QAASkB,KAAKtB,MAAMI,YAErBmB,MAAK,SAAAC,GACAA,EAASC,GACTD,EAASE,OAAOH,MAAK,SAAAG,GACjBC,MAAM,kBAIVH,EAASE,OAAOH,MAAK,SAAAG,GACjBC,MAAM,6BAIlBL,KAAKT,gBA9CjB,oCAkDQS,KAAKd,SAAS,CAACP,GAAI,GACfC,KAAM,GACNC,MAAO,GACPC,QAAS,OArDrB,+BAyDc,IAAD,EAC4BkB,KAAKtB,MAA9BE,EADH,EACGA,KAAMC,EADT,EACSA,MAAOC,EADhB,EACgBA,QACrB,OACI,yBAAKwB,UAAU,QACX,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAO,CAACC,aAAc,UAC5C,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,qBAKJ,6BAAM,6BAEN,kBAAC,gBAAD,CACIC,IAAI,OACJC,SAAUf,KAAKX,aACf2B,QAAS,SAAAC,GAAM,OAAIC,QAAQC,IAAIF,KAE/B,kBAAC,gBAAD,CACIG,MAAM,OACNP,QAAQ,WACRQ,SAAUrB,KAAKjB,aAAa,QAC5BH,KAAK,OACLQ,MAAOR,EACP0C,WAAY,CAAC,YACbC,cAAe,CAAC,4BAZxB,IAaO,6BAbP,IAaa,6BACT,kBAAC,gBAAD,CACIH,MAAM,QACNP,QAAQ,WACRQ,SAAUrB,KAAKjB,aAAa,SAC5BH,KAAK,QACLQ,MAAOP,EACPyC,WAAY,CAAC,WAAY,WACzBC,cAAe,CAAC,yBAA0B,wBAE9C,6BAvBJ,IAuBU,6BACN,kBAAC,gBAAD,CACIH,MAAM,UACNP,QAAQ,WACRQ,SAAUrB,KAAKjB,aAAa,WAC5BH,KAAK,UACLQ,MAAON,EACPwC,WAAY,CAAC,YACbC,cAAe,CAAC,4BAEpB,6BAjCJ,IAiCU,6BACN,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAASZ,QAAQ,YAAYa,MAAM,WAAhD,gBAxGpB,GAA8BC,aCGfC,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAM/D,c","file":"static/js/main.bb48779c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\nimport uuid from 'react-uuid';\n\n\nexport class UserForm extends Component {\n\n    constructor() {\n        super();\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    state = {\n        id:'',\n        name: '',\n        email: '',\n        message: ''\n    }\n\n    handleChange = input => e => {\n        this.setState({[input]: e.target.value});\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        fetch('https://dez880womj.execute-api.us-east-2.amazonaws.com/deploy1/gateway', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n              body: JSON.stringify({\n                id: uuid(),  \n                name: this.state.name,\n                email: this.state.email,\n                message: this.state.message\n              })\n            }).then(response => {\n                if (response.ok) {\n                    response.json().then(json => {\n                        alert(\"Email sent!\");\n                    });\n                }\n                else{\n                    response.json().then(json => {\n                        alert(\"Some error occured!\");\n                    });\n                }\n            });\n            this.handleReset();\n    }\n\n    handleReset() {\n        this.setState({id: '',\n            name: '',\n            email: '',\n            message: ''\n        });\n    }\n \n    render() {\n        const { name, email, message } = this.state;\n        return (\n            <div className=\"page\">\n                <AppBar position=\"static\" style={{marginBottom: \"100px\"}}>\n                    <Toolbar>\n                    <Typography variant=\"h5\">\n                       MK Contact Form\n                    </Typography>\n                    </Toolbar>  \n                </AppBar>\n                <br /><br />\n                \n                <ValidatorForm\n                    ref=\"form\"\n                    onSubmit={this.handleSubmit}\n                    onError={errors => console.log(errors)}\n                >\n                    <TextValidator\n                        label=\"Name\"\n                        variant=\"outlined\"\n                        onChange={this.handleChange('name')}\n                        name=\"name\"\n                        value={name}\n                        validators={['required']}\n                        errorMessages={['this field is required']}\n                    /> <br/> <br />\n                    <TextValidator\n                        label=\"Email\"\n                        variant=\"outlined\"\n                        onChange={this.handleChange('email')}\n                        name=\"email\"\n                        value={email}\n                        validators={['required', 'isEmail']}\n                        errorMessages={['this field is required', 'email is not valid']}\n                    />\n                    <br/> <br />\n                    <TextValidator\n                        label=\"Message\"\n                        variant=\"outlined\"\n                        onChange={this.handleChange('message')}\n                        name=\"message\"\n                        value={message}\n                        validators={['required']}\n                        errorMessages={['this field is required']}\n                    />\n                    <br/> <br />\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">Submit</Button>\n                </ValidatorForm>\n            </div>  \n        )\n    }\n}\n\nexport default UserForm\n","import React from 'react';\nimport './App.css';\nimport UserForm from \"./components/UserForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}